diff --git a/src/dev_ng/CMakeLists.txt b/src/dev_ng/CMakeLists.txt
new file mode 100644
--- /dev/null
+++ b/src/dev_ng/CMakeLists.txt
@@ -0,0 +1,76 @@
+cmake_minimum_required(VERSION 3.18)
+project(Fuzzy)
+
+if (CMAKE_SIZEOF_VOID_P EQUAL 8)
+    set(ARCH_TYPE "x64")
+else (CMAKE_SIZEOF_VOID_P EQUAL 4)
+    set(ARCH_TYPE "x86")
+endif()
+message("CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}")
+message("ARCH_TYPE=${ARCH_TYPE}")
+if (MSVC)
+    message("DXSDK_DIR=$ENV{DXSDK_DIR}")
+endif()
+
+set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/bin")
+set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR}/bin/${ARCH_TYPE}-${CMAKE_BUILD_TYPE})
+set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_SOURCE_DIR}/bin/${ARCH_TYPE}-${CMAKE_BUILD_TYPE})
+set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
+set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE})
+set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG})
+
+set(GAME_CONFIG "BankRelease")
+
+if (WIN32)
+    set(DIRECTX_INCLUDE_DIRS "$ENV{DXSDK_DIR}Include")
+else()
+    message("Using DXVK for D3D11 API")
+
+    include(ExternalProject)
+    ExternalProject_Add(dxvk
+        GIT_REPOSITORY    https://github.com/doitsujin/dxvk
+        GIT_TAG           v2.3
+        GIT_SHALLOW       ON
+        BUILD_ALWAYS      OFF
+        CONFIGURE_HANDLED_BY_BUILD ON
+        CONFIGURE_COMMAND meson setup ../dxvk --buildtype=release -Denable_d3d10=false -Denable_d3d11=true -Denable_dxgi=true
+        BUILD_COMMAND     ninja
+        BUILD_BYPRODUCTS  <BINARY_DIR>/src/d3d11/libdxvk_d3d11.so
+        INSTALL_COMMAND   ""
+    )
+    ExternalProject_Get_property(dxvk SOURCE_DIR BINARY_DIR)
+    set(DIRECTX_INCLUDE_DIRS
+        "${SOURCE_DIR}/include/native/directx"
+        "${SOURCE_DIR}/include/native/windows"
+    )
+    set(DIRECTX_LIBS ${BINARY_DIR}/src/d3d11/libdxvk_d3d11.so)
+    add_custom_target(dependencies ALL)
+endif()
+
+if (MSVC)
+add_subdirectory(game/vs_project1_lib)
+add_subdirectory(game/vs_project2_lib)
+add_subdirectory(game/vs_project3_lib)
+add_subdirectory(game/vs_project4_lib)
+add_subdirectory(game/VS_Project_network)
+endif()
+
+add_subdirectory(rage/naturalmotion/vcproj/NaturalMotion)
+if (MSVC)
+add_subdirectory(rage/base/src/vcproj/RageAudio)
+endif()
+add_subdirectory(rage/base/src/vcproj/RageCore)
+add_subdirectory(rage/base/src/vcproj/RageCreature)
+add_subdirectory(rage/framework/src/vcproj/RageFramework)
+add_subdirectory(rage/base/src/vcproj/RageGraphics)
+add_subdirectory(game/VS_Project/RageMisc)
+add_subdirectory(rage/base/src/vcproj/RageNet)
+add_subdirectory(rage/base/src/vcproj/RagePhysics)
+add_subdirectory(rage/script/src/vcproj/RageScript)
+add_subdirectory(rage/base/src/vcproj/RageSec)
+add_subdirectory(rage/suite/src/vcproj/RageSuiteCreature)
+add_subdirectory(rage/scaleform/Src/vcproj/scaleformgfx)
+
+if (MSVC)
+add_subdirectory(game/VS_Project)
+endif()
