diff --git a/src/dev_ng/game/frontend/PauseMenu.cpp b/src/dev_ng/game/frontend/PauseMenu.cpp
--- a/src/dev_ng/game/frontend/PauseMenu.cpp
+++ b/src/dev_ng/game/frontend/PauseMenu.cpp
@@ -25,7 +25,7 @@
 #include "game/localisation.h"
 #endif // __BANK
 
-#include "Scaleform/tweenstar.h"
+#include "scaleform/tweenstar.h"
 #include "system/service.h"
 
 // Framework headers
@@ -49,16 +49,16 @@
 #include "camera/viewports/ViewportManager.h"
 #include "control/gamelogic.h"
 #include "control/gps.h"
-#include "core/game.h"
-#include "Cutscene/CutsceneManagerNew.h"
+#include "Core/game.h"
+#include "Cutscene/CutSceneManagerNew.h"
 #include "frontend/Credits.h"
 #include "frontend/DisplayCalibration.h"
 #include "frontend/GameStream.h"
 #include "frontend/GameStreamMgr.h"
-#include "Frontend/PauseMenu.h"
+#include "frontend/PauseMenu.h"
 #include "frontend/PauseMenu_parser.h"
 #include "frontend/LanguageSelect.h"
-#include "Frontend/loadingscreens.h"
+#include "frontend/loadingscreens.h"
 
 #include "Peds/pedplacement.h"
 
@@ -68,48 +68,48 @@
 #include "frontend/MousePointer.h"
 #endif // RSG_PC
 
-#include "Frontend/CMapMenu.h"
-#include "Frontend/MiniMap.h"
-#include "Frontend/MiniMapCommon.h"
-#include "Frontend/MiniMapRenderThread.h"
-#include "Frontend/NewHud.h"
-#include "Frontend/HudMarkerManager.h"
-#include "Frontend/HudTools.h"
-#include "Frontend/GameStreamMgr.h"
-#include "Frontend/BusySpinner.h"
-#include "Frontend/SocialClubMenu.h"
-#include "Frontend/StatsMenu.h"
-#include "Frontend/ControllerLabelMgr.h"
-#include "Frontend/InfoMenu.h"
-#include "Frontend/ScaleformMenuHelper.h"
-#include "Frontend/Scaleform/ScaleformMgr.h"
-#include "Frontend/Store/PauseStoreMenu.h"
-#include "Frontend/Store/StoreScreenMgr.h"
-#include "Frontend/FrontendStatsMgr.h"
+#include "frontend/CMapMenu.h"
+#include "frontend/MiniMap.h"
+#include "frontend/MiniMapCommon.h"
+#include "frontend/MiniMapRenderThread.h"
+#include "frontend/NewHud.h"
+#include "frontend/HudMarkerManager.h"
+#include "frontend/HudTools.h"
+#include "frontend/GameStreamMgr.h"
+#include "frontend/BusySpinner.h"
+#include "frontend/SocialClubMenu.h"
+#include "frontend/StatsMenu.h"
+#include "frontend/ControllerLabelMgr.h"
+#include "frontend/InfoMenu.h"
+#include "frontend/ScaleformMenuHelper.h"
+#include "frontend/Scaleform/ScaleFormMgr.h"
+#include "frontend/Store/PauseStoreMenu.h"
+#include "frontend/Store/StoreScreenMgr.h"
+#include "frontend/FrontendStatsMgr.h"
 #include "frontend/KeyMappingMenu.h"
-#include "Frontend/ReportMenu.h"
-#include "Frontend/WarningScreen.h"
-#include "Frontend/UIMenuPed.h"
-#include "Frontend/ui_channel.h"
+#include "frontend/ReportMenu.h"
+#include "frontend/WarningScreen.h"
+#include "frontend/UIMenuPed.h"
+#include "frontend/ui_channel.h"
 #if GTA_REPLAY
-#include "control/replay/replaycontrol.h"
-#include "Network/Cloud/VideoUploadManager.h"
+#include "control/replay/ReplayControl.h"
+#include "network/Cloud/VideoUploadManager.h"
 #include "frontend/VideoEditor/ui/Menu.h"
 #include "frontend/VideoEditor/ui/Editor.h"
 #include "frontend/VideoEditor/ui/Playback.h"
 #include "rline/rlsystemui.h"
 #endif // GTA_REPLAY
-#include "Game/Clock.h"
-#include "Game/Wanted.h"
-#include "Game/User.h"
-#include "Game/ModelIndices.h"
-#include "Network/Network.h"
-#include "Network/Commerce/CommerceManager.h"
-#include "Network/events/NetworkEventTypes.h"
-#include "Network/Live/NetworkTelemetry.h"
-#include "Network/Live/PlayerCardDataManager.h"
-#include "Network/NetworkInterface.h"
-#include "Network/Sessions/NetworkSession.h"
+#include "game/Clock.h"
+#include "game/Wanted.h"
+#include "game/user.h"
+#include "game/ModelIndices.h"
+#include "network/Network.h"
+#include "network/Commerce/CommerceManager.h"
+#include "network/Events/NetworkEventTypes.h"
+#include "network/Live/NetworkTelemetry.h"
+#include "network/Live/PlayerCardDataManager.h"
+#include "network/NetworkInterface.h"
+#include "network/Sessions/NetworkSession.h"
 #if RSG_PC
 #include "network/Voice/NetworkVoice.h"
 #endif // RSG_PC
@@ -117,9 +117,9 @@
 #include "frontend/landing_page/LegacyLandingScreen.h"
 #include "frontend/TextInputBox.h"
 #endif // RSG_PC
-#include "Peds/Ped.h"
-#include "Peds/Rendering/PedHeadshotManager.h"
-#include "Profile/timebars.h"
+#include "Peds/ped.h"
+#include "Peds/rendering/PedHeadshotManager.h"
+#include "profile/timebars.h"
 #include "renderer/PostProcessFX.h"
 #include "renderer/PostProcessFXHelper.h"
 #include "renderer/RenderPhases/RenderPhaseDebugNY.h"
@@ -127,12 +127,12 @@
 #include "renderer/RenderPhases/RenderPhaseStdNY.h"
 #include "renderer/RenderThread.h"
 #include "renderer/Water.h"
-#include "saveload/GenericGameStorage.h"
+#include "SaveLoad/GenericGameStorage.h"
 #include "SaveLoad/savegame_channel.h"
 #include "SaveLoad/savegame_frontend.h"
 #include "SaveLoad/savegame_initial_checks.h"
 #include "SaveLoad/savegame_photo_manager.h"
-#include "saveload/savegame_queue.h"
+#include "SaveLoad/savegame_queue.h"
 #include "scene/world/GameWorld.h"
 #include "scene/streamer/SceneStreamer.h"
 #include "scene/streamer/SceneStreamerMgr.h"
@@ -140,32 +140,32 @@
 #include "scene/playerswitch/PlayerSwitchInterface.h"
 #include "script/script_hud.h"
 #include "Stats/StatsMgr.h"
-#include "stats/StatsInterface.h"
-#include "stats/MoneyInterface.h"
+#include "Stats/StatsInterface.h"
+#include "Stats/MoneyInterface.h"
 #include "streaming/defragmentation.h"
 #include "streaming/streaming.h"
 #include "streaming/streamingengine.h"
 #include "streaming/streamingvisualize.h"
-#include "Streaming/streamingrequestlist.h"
-#include "System/controlMgr.h"
-#include "System/pad.h"
+#include "streaming/streamingrequestlist.h"
+#include "system/controlMgr.h"
+#include "system/pad.h"
 #include "system/service.h"
 #include "system/SettingsDefaults.h"
 #include "text/messages.h"
-#include "text/textfile.h"
-#include "Vfx/Misc/MovieManager.h"
+#include "text/TextFile.h"
+#include "vfx/misc/MovieManager.h"
 #include "event/EventNetwork.h"
 #include "event/EventGroup.h"
 
-#include "Frontend/CCrewMenu.h"
-#include "Frontend/CFriendsMenu.h"
-#include "Frontend/CMapMenu.h"
-#include "Frontend/CScriptMenu.h"
-#include "Frontend/CSettingsMenu.h"
-#include "Frontend/GalleryMenu.h"
-#include "Frontend/ButtonEnum.h"
-#include "Frontend/MultiplayerGamerTagHud.h"
-#include "Frontend/UIContexts.h"
+#include "frontend/CCrewMenu.h"
+#include "frontend/CFriendsMenu.h"
+#include "frontend/CMapMenu.h"
+#include "frontend/CScriptMenu.h"
+#include "frontend/CSettingsMenu.h"
+#include "frontend/GalleryMenu.h"
+#include "frontend/ButtonEnum.h"
+#include "frontend/MultiplayerGamerTagHud.h"
+#include "frontend/UIContexts.h"
 #include "frontend/VideoEditorPauseMenu.h"
 #include "frontend/VideoEditor/VideoEditorInterface.h"
 
@@ -209,7 +209,7 @@ extern rage::parEnumData		parser_eInstructionButtons_Data;
 #endif
 
 #if RSG_DURANGO
-#include "Network/Live/Events_durango.h"
+#include "network/Live/Events_durango.h"
 #endif
 
 #if RSG_ORBIS
@@ -3188,7 +3188,7 @@ void CPauseMenu::Open(eFRONTEND_MENU_VERSION iMenuVersion, bool bPauseGame/*=tru
 			stationIndex = g_OffRadioStation;
 		}
 
-#if RSG_PC		
+#if RSG_PC && !RSG_LINUX
 		if(station && station->IsUserStation() && stationIndex != (s32)g_OffRadioStation && !audRadioStation::HasUserTracks())
 		{
 			SetMenuPreference(PREF_RADIO_STATION, -1); // make sure that if Self Radio is selected but we have no tracks we shut the radio off
@@ -3245,7 +3245,7 @@ void CPauseMenu::Open(eFRONTEND_MENU_VERSION iMenuVersion, bool bPauseGame/*=tru
 	else
 		SUIContexts::Deactivate("IsSpectating");
 
-#if RSG_PC
+#if RSG_PC && !RSG_LINUX
 	if(audRadioStation::GetUserRadioTrackManager()->IsScanning())
 	{
 		if(audRadioStation::GetUserRadioTrackManager()->GetIsCompleteScanRunning())
@@ -4034,7 +4034,7 @@ void CPauseMenu::Update()
 		return;
 	}
 
-#if RSG_PC
+#if RSG_PC && !RSG_LINUX
 	if (sm_bActive && sm_bWaitOnPCGamepadCalibrationScreen)
 	{
 		CPCGamepadCalibration::Update();
@@ -4380,7 +4380,7 @@ void CPauseMenu::Update()
 		sm_pDynamicPause->UpdateMenuPed();
 	}
 
-#if RSG_PC
+#if RSG_PC && !RSG_LINUX
 	// Disable sending of outgoing voice data while in the voice chat settings menu B*2168376
 	// WARNING: As of December 19, 2014, players in the voice chat settings menu will still
 	//			be able to hear other players but other players can't hear them. There is no indication
@@ -4407,7 +4407,7 @@ void CPauseMenu::Update()
 
 		gRenderThreadInterface.Flush();
 
-#if RSG_PC
+#if RSG_PC && !RSG_LINUX
 		CNetwork::GetVoice().SetVoiceTestMode(false);
 #endif // RSG_PC
 
@@ -4770,7 +4770,7 @@ bool CPauseMenu::IsPlayCreditsSupportedOnThisScreen( MenuScreenId const menuLayo
 	return isSupported;
 }
 
-#if RSG_PC
+#if RSG_PC && !RSG_LINUX
 void CPauseMenu::ClosePCGamepadCalibrationScreen()
 {
 	if(sm_bWaitOnPCGamepadCalibrationScreen)
@@ -4982,7 +4982,7 @@ void CPauseMenu::RenderForegroundContent(const PauseMenuRenderDataExtra& renderD
 
 	if (renderData.bWaitOnCalibrationScreen WIN32PC_ONLY(|| renderData.bWaitOnPCGamepadScreen))
 	{
-#if RSG_PC
+#if RSG_PC && !RSG_LINUX
 		// it'll only be one or the other ...can't have both on at same time
 		if (renderData.bWaitOnPCGamepadScreen)
 		{
@@ -6906,6 +6906,7 @@ void CPauseMenu::HandleVoiceInput(int iDirection, bool bForceUpdate)
 
 		if( uiVerifyf(iDirection >= -1 && iDirection <= 1, "Received invalid direction %i, expected only -1,0,1!", iDirection) )
 		{
+#if !RSG_LINUX
 			RVDeviceInfo devices[VoiceChat::MAX_DEVICES];
 			int deviceCount = RVoice::ListDevices(devices, VoiceChat::MAX_DEVICES, RV_CAPTURE);
 
@@ -6922,6 +6923,7 @@ void CPauseMenu::HandleVoiceInput(int iDirection, bool bForceUpdate)
 				iNewVCInput = deviceCount - 1;
 			else if(iNewVCInput >= deviceCount)
 				iNewVCInput = 0;
+#endif
 
 			// don't play the tick sound on initial creation if we had an invalid station
 			if( iDirection != 0 && iNewVCInput != GetMenuPreference(PREF_VOICE_INPUT_DEVICE) )
@@ -6984,6 +6986,7 @@ void CPauseMenu::HandleVoiceOutput(int iDirection, bool bForceUpdate)
 
 		if( uiVerifyf(iDirection >= -1 && iDirection <= 1, "Received invalid direction %i, expected only -1,0,1!", iDirection) )
 		{
+#if !RSG_LINUX
 			RVDeviceInfo devices[VoiceChat::MAX_DEVICES];
 			int num = RVoice::ListDevices(devices, VoiceChat::MAX_DEVICES, RV_PLAYBACK);
 
@@ -6997,6 +7000,7 @@ void CPauseMenu::HandleVoiceOutput(int iDirection, bool bForceUpdate)
 				iNewVCOutput = num - 1;
 			else if(iNewVCOutput >= num)
 				iNewVCOutput = 0;
+#endif
 
 			// don't play the tick sound on initial creation if we had an invalid station
 			if( iDirection != 0 && iNewVCOutput != GetMenuPreference(PREF_VOICE_OUTPUT_DEVICE) )
@@ -7071,6 +7075,7 @@ void CPauseMenu::HandleVoiceChatMode(int iDirection, bool bForceUpdate /* = fals
 					SetItemPref(PREF_VOICE_CHAT_MODE, iChatPreference,  UPDATE_PREFS_FROM_MENU);
 				}
 
+#if !RSG_LINUX
 				const char* pText = iChatPreference == VoiceChat::CAPTURE_MODE_PUSH_TO_TALK ? TheText.Get("MO_VCHAT_MODE_PTT") : TheText.Get( curItem.cTextId.GetHash(), "");
 
 				if( CScaleformMenuHelper::SET_DATA_SLOT(static_cast<PM_COLUMNS>(voiceData.depth-1), onScreenIndex, curItem.MenuUniqueId + PREF_OPTIONS_THRESHOLD, 
@@ -7079,6 +7084,7 @@ void CPauseMenu::HandleVoiceChatMode(int iDirection, bool bForceUpdate /* = fals
 					// we could send all the options, but since we gotta override the text anyway, let's just send the relevant one
 					CScaleformMgr::AddParamLocString(curValue.MenuDisplayOptions[iChatPreference].cTextId.GetHash());
 				}
+#endif
 			
 				CScaleformMgr::EndMethod();
 
@@ -9965,7 +9971,7 @@ void CPauseMenu::UpdateInput(const bool bLockInputThisFrame)
 	}
 #endif // __ALLOW_IMPORT_OF_SP_SAVEGAMES
 
-#if RSG_PC
+#if RSG_PC && !RSG_LINUX
 	if (sm_bWaitOnExitToWindowsConfirmationScreen)
 	{
 		if (sm_iExitTimer == 0)
@@ -10107,7 +10113,7 @@ void CPauseMenu::UpdateInput(const bool bLockInputThisFrame)
 					pressed = PAD_RIGHTSHOULDER1;
 			}
 
-#if RSG_PC
+#if RSG_PC && !RSG_LINUX
 			if (!sm_bMaxPayneMode && CPauseMenu::CheckInput(FRONTEND_INPUT_SELECT, false, iInputFlag))
 			{
 				g_rlPc.ShowUi();
@@ -11584,7 +11590,7 @@ void CPauseMenu::SetDefaultValues( bool WIN32PC_ONLY( bDefaultGraphics ) )
 	SetMenuPreference(PREF_BIG_RADAR_NAMES, FALSE);
 	SetMenuPreference(PREF_SHOW_TEXT_CHAT, TRUE);
 
-#if RSG_PC
+#if RSG_PC && !RSG_LINUX
 	if ( bDefaultGraphics )
 	{
 		SetMenuPreference(PREF_GFX_VID_OVERRIDE, FALSE);
@@ -12040,6 +12046,7 @@ int CPauseMenu::GetResolutionIndex()
 {
 	atArray<grcDisplayWindow> &resolutionList = CSettingsManager::GetInstance().GetResolutionList(CPauseMenu::GetMenuPreference(PREF_VID_MONITOR));
 
+#if !RSG_LINUX
 	RECT rcWindowRect;
 	GetWindowRect( g_hwndMain, &rcWindowRect );
 	u32 iWindowWidth = rcWindowRect.right - rcWindowRect.left;
@@ -12056,6 +12063,7 @@ int CPauseMenu::GetResolutionIndex()
 			(resolutionList[iResolutionPrefValue].uHeight == iWindowHeight || resolutionList[iResolutionPrefValue].uHeight == iClientHeight))
 			return iResolutionPrefValue;
 	}
+#endif
 
 	return 0;
 }
@@ -12602,6 +12610,7 @@ void CPauseMenu::ConvertToActualResolution(u32& width, u32& height, int screenRe
 		atArray<grcDisplayWindow> &resolutionsList = CSettingsManager::GetInstance().GetNativeResolutionList(CPauseMenu::GetMenuPreference(PREF_VID_MONITOR));
 		if (screenResolutionIndex < resolutionsList.size())
 		{
+#if !RSG_LINUX
 			u32 windowStyle = GetWindowLong( g_hwndMain, GWL_STYLE );
 
 			windowStyle &= ~WS_POPUP;
@@ -12624,6 +12633,7 @@ void CPauseMenu::ConvertToActualResolution(u32& width, u32& height, int screenRe
 
 			width = min(largestWidth - widthDiff, width);
 			height = min(largestHeight - heightDiff, height);
+#endif
 		}
 	}
 }
@@ -12651,7 +12661,7 @@ Settings CPauseMenu::GetMenuGraphicsSettings(bool bForSaving)
 		{
 			SetMenuPreference(PREF_GFX_TESSELLATION, 0);
 			SetMenuPreference(PREF_GFX_GRASS_QUALITY, 0);
-			SetMenuPreference(PREF_GFX_SHADOW_SOFTNESS, min(GetMenuPreference(PREF_GFX_SHADOW_SOFTNESS), 3));
+			SetMenuPreference(PREF_GFX_SHADOW_SOFTNESS, Min(GetMenuPreference(PREF_GFX_SHADOW_SOFTNESS), 3));
 			SetMenuPreference(PREF_GFX_DOF, 0);
 		}
 
@@ -12862,6 +12872,7 @@ void CPauseMenu::UpdateVoiceBar(bool bUpdateSlot)
 
 void CPauseMenu::UpdateVoiceSettings()
 {
+#if !RSG_LINUX
 	FrontendVoiceSettings voiceSettings;
 	u32 uInputDeviceId = 0;
 	u32 uOutputDeviceId = 0;
@@ -12894,14 +12905,17 @@ void CPauseMenu::UpdateVoiceSettings()
 	voiceSettings.m_eMode = (VoiceChat::CaptureMode)GetMenuPreference(PREF_VOICE_CHAT_MODE);
 
 	NetworkInterface::GetVoice().AdjustSettings(voiceSettings);
+#endif
 }
 
 void CPauseMenu::UpdateVoiceMuteOnLostFocus()
 {
+#if !RSG_LINUX
 	// We set this independently of the other voicechat settings every frame in order to:
 	//	1) Remove the dependency between on graphics from the voicechat code.
 	//  2) Account for network re-initialization.
 	NetworkInterface::GetVoice().SetMuteChatBecauseLostFocus((GetMenuPreference(PREF_AUDIO_MUTE_ON_FOCUS_LOSS) == 1) && GRCDEVICE.GetLostFocusForAudio());
+#endif
 }
 
 bool CPauseMenu::GetCanApplySettings()
@@ -13888,7 +13902,7 @@ void CPauseMenu::SetValueBasedOnPreference(s32 iPrefChanged, CPauseMenu::UpdateP
 
 #endif // LIGHT_EFFECTS_SUPPORT
 
-#if RSG_PC
+#if RSG_PC && !RSG_LINUX
 		case PREF_VID_SCREEN_TYPE:
 		case PREF_VID_RESOLUTION:
 		case PREF_VID_REFRESH:
