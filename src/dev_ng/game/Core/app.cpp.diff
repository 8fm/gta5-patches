diff --git a/src/dev_ng/game/Core/app.cpp b/src/dev_ng/game/Core/app.cpp
--- a/src/dev_ng/game/Core/app.cpp
+++ b/src/dev_ng/game/Core/app.cpp
@@ -16,7 +16,7 @@
 #include "rline/rlnptrophy.h"
 #include "rline/scmatchmaking/rlscmatchmanager.h"
 #include "system/controlMgr.h"
-#include "system/fileMgr.h"
+#include "system/FileMgr.h"
 #include "system/StreamingInstall.winrt.h"
 #include "system/param.h"
 #include "system/system.h"
@@ -39,10 +39,10 @@
 #include "camera/CamInterface.h"
 #include "camera/viewports/ViewportManager.h"
 #include "control/gamelogic.h"
-#include "Control/replay/Replay.h"
-#include "core/dongle.h"
+#include "control/replay/replay.h"
+#include "Core/dongle.h"
 #include "Cutscene/CutSceneManagerNew.h"
-#include "debug/debug.h"
+#include "debug/Debug.h"
 #include "frontend/GameStreamMgr.h"
 #include "frontend/landing_page/LandingPageArbiter.h"
 #include "frontend/loadingscreens.h"
@@ -51,22 +51,22 @@
 #include "frontend/WarningScreen.h"
 #include "game/Clock.h"
 #include "ik/IkManager.h"
-#include "modelinfo/mlomodelinfo.h"
-#include "network/live/livemanager.h"
-#include "network/events/NetworkEventTypes.h"
+#include "modelinfo/MloModelInfo.h"
+#include "network/Live/livemanager.h"
+#include "network/Events/NetworkEventTypes.h"
 #include "network/Objects/NetworkObjectPopulationMgr.h"
 #include "network/Sessions/NetworkSession.h"
 #include "tools/SectorTools.h"
 #include "tools/TracingStats.h"
-#include "objects/DummyObject.h"
-#include "pathserver/navgenparam.h"
+#include "Objects/DummyObject.h"
+#include "pathserver/NavGenParam.h"
 #include "profile/cputrace.h"
-#include "renderer/renderThread.h"
+#include "renderer/RenderThread.h"
 #include "renderer/DrawLists/drawListMgr.h"
-#include "renderer/DrawLists/drawListNY.h"
+#include "renderer/DrawLists/DrawListNY.h"
 #include "replaycoordinator/ReplayCoordinator.h"
-#include "saveload/savegame_autoload.h"
-#include "saveload/GenericGameStorage.h"
+#include "SaveLoad/savegame_autoload.h"
+#include "SaveLoad/GenericGameStorage.h"
 #include "scene/scene.h"
 #include "script/script.h"
 #include "streaming/populationstreaming.h"
@@ -75,11 +75,11 @@
 #include "system/PMCPerfControl.h"
 #include "system/gcmPerfmon.h"
 #include "system/param.h"
-#include "system/taskscheduler.h"
+#include "system/TaskScheduler.h"
 #include "system/telemetry.h"
-#include "vehicles/vehiclepopulation.h"
+#include "Vehicles/vehiclepopulation.h"
 #include "security/ragesecengine.h"
-#include "Weapons/Projectiles/Projectile.h"
+#include "weapons/projectiles/Projectile.h"
 #if  __PPU
 #include "sn/libsn.h"
 #include <stdlib.h> // for malloc_stats
@@ -115,8 +115,8 @@
 #include <Psapi.h>
 #endif // RSG_LAUNCHER_CHECK
 
-#include "Control/replay/ReplaySettings.h"
-#include "Network/Objects/NetworkObjectMgr.h"
+#include "control/replay/ReplaySettings.h"
+#include "network/Objects/NetworkObjectMgr.h"
 
 #if !__FINAL
 PARAM(trackerreport, "[GAME] Filename for the initial memory track");
@@ -1251,7 +1251,7 @@ fwFsm::Return CApp::RunGame_OnEnter()
 	PF_FINISH_STARTUPBAR();
 
 	SetInstance(this);
-#if RSG_PC
+#if RSG_PC && !RSG_LINUX
 	grcResourceCache::SetGameRunningCallback(IsGameRunning);
 
 	GRCDEVICE.SetDisablePauseOnLostFocusSystemOverride(false);
@@ -1496,6 +1496,7 @@ void GracefullyShutdownNetwork()
 
 void ProcessScuiCloseLogic()
 {
+#if !RSG_LINUX
 	if(g_rlPc.GetUiInterface())
 	{
 		if (!sbClosedScui && g_rlPc.GetUiInterface()->IsVisible())
@@ -1512,6 +1513,7 @@ void ProcessScuiCloseLogic()
 			sbDisabledScui = true;
 		}
 	}
+#endif // !RSG_LINUX
 }
 
 bool CApp::IsShutdownConfirmed()
@@ -1526,6 +1528,7 @@ bool CApp::IsScuiDisabledForShutdown()
 
 void CApp::CheckExit()
 {
+#if !RSG_LINUX
 	// ===========================================
 	//   PROCESSING THE STARTING OF THE EXIT FLOW 
 	// ===========================================
@@ -1728,11 +1731,12 @@ void CApp::CheckExit()
 
 		ExitProcess(0);
 	}
+#endif // !RSG_LINUX
 }
 
 void CApp::Restart()
 {
-#if RSG_PC
+#if RSG_PC && !RSG_LINUX
 	const int MODULE_FILENAME_LENGTH = 1024;
 
 	TCHAR strModuleFileName[MODULE_FILENAME_LENGTH];
@@ -1784,12 +1788,17 @@ void CApp::WriteExitFile(const char* error)
 		return;
 	}
 
+#if RSG_LINUX
+	uint32_t pid;
+	return;
+#else
 	// Grab the current pid
 	DWORD pid = GetCurrentProcessId();
 	if (pid == 0)
 	{
 		return;
 	}
+#endif // !RSG_LINUX
 
 	// Check for an in-file
 	char path_buffer[MAX_PATH] = {0};
