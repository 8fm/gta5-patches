diff --git a/src/dev_ng/game/audio/scriptaudioentity.cpp b/src/dev_ng/game/audio/scriptaudioentity.cpp
--- a/src/dev_ng/game/audio/scriptaudioentity.cpp
+++ b/src/dev_ng/game/audio/scriptaudioentity.cpp
@@ -21,20 +21,20 @@
 #include "audiohardware/waveslot.h"
 #include "audiohardware/driver.h"
 #include "audio/caraudioentity.h"
-#include "debug/debug.h"
-#include "debug/debugglobals.h"
+#include "debug/Debug.h"
+#include "debug/DebugGlobals.h"
 #include "dynamicmixer.h"
 #include "text/messages.h"
-#include "peds/ped.h"
-#include "peds/PedPhoneComponent.h"
-#include "peds/popzones.h"
+#include "Peds/ped.h"
+#include "Peds/PedPhoneComponent.h"
+#include "Peds/PopZones.h"
 #include "control/replay/Audio/ScriptAudioPacket.h"
 #include "scene/RefMacros.h"
 #include "script/script.h"
 #include "system/FileMgr.h"
 #include "game/zones.h"
-#include "vehicles/automobile.h"
-#include "Vfx/Misc/Fire.h"
+#include "Vehicles/Automobile.h"
+#include "vfx/misc/Fire.h"
 #include "network/NetworkInterface.h"
 #include "network/Events/NetworkEventTypes.h"
 #include "game/user.h"
@@ -7968,7 +7968,7 @@ void audScriptAudioEntity::PlayStreamFromEntityInternal(CEntity *entity)
 				REPLAY_ONLY(CReplayMgr::ReplayRecordPlayStreamFromEntity(entity, m_StreamSound, sm_CurrentStreamName, sm_CurrentStartOffset, sm_CurrentSetName);)
 			}
 #endif
-#if __BANK
+#if __USEDEBUGAUDIO
 			if(g_ScriptedStreamSpew)
 			{
 				audDebugf1("[audScriptedStream] Playing stream: %s from entity",SOUNDFACTORY.GetMetadataManager().GetObjectNameFromNameTableOffset(m_StreamSound->GetBaseMetadata()->NameTableOffset));
@@ -8020,7 +8020,7 @@ void audScriptAudioEntity::PlayStreamFrontendInternal()
 			REPLAY_ONLY(CReplayMgr::ReplayRecordPlayStreamFrontend(m_StreamSound, sm_CurrentStreamName, sm_CurrentStartOffset, sm_CurrentSetName);)
 		}
 #endif
-#if __BANK
+#if __USEDEBUGAUDIO
 		if(g_ScriptedStreamSpew)
 		{
 			audDebugf1("[audScriptedStream] Playing stream: %s frontend",SOUNDFACTORY.GetMetadataManager().GetObjectNameFromNameTableOffset(m_StreamSound->GetBaseMetadata()->NameTableOffset));
@@ -8037,7 +8037,9 @@ const u32 audScriptAudioEntity::GetStreamPlayTime() const
 {
 	if(m_StreamSound && m_ScriptStreamState == AUD_SCRIPT_STREAM_PLAYING)
 	{
+#if __USEDEBUGAUDIO
 		if(naVerifyf(m_StreamSound->GetSoundTypeID() == StreamingSound::TYPE_ID,"Script stream %s, with a parent sound that it's not a stream sound. Please bug default audio.",g_AudioEngine.GetSoundManager().GetFactory().GetMetadataManager().GetObjectName(m_StreamSound->GetBaseMetadata()->NameTableOffset)))
+#endif
 		{
 			return ((audStreamingSound*)m_StreamSound)->GetCurrentPlayTimeOfWave();				
 		}
@@ -8114,7 +8116,7 @@ void audScriptAudioEntity::PlayStreamFromPositionInternal(const Vector3 &pos)
 			REPLAY_ONLY(CReplayMgr::ReplayRecordPlayStreamFromPosition(pos, m_StreamSound, sm_CurrentStreamName, sm_CurrentStartOffset, sm_CurrentSetName);)
 		}
 #endif
-#if __BANK
+#if __USEDEBUGAUDIO
 		if(g_ScriptedStreamSpew)
 		{
 			audDebugf1("[audScriptedStream] Playing stream: %s from position",SOUNDFACTORY.GetMetadataManager().GetObjectNameFromNameTableOffset(m_StreamSound->GetBaseMetadata()->NameTableOffset));
