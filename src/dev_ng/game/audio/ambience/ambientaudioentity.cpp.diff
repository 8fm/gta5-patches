diff --git a/src/dev_ng/game/audio/ambience/ambientaudioentity.cpp b/src/dev_ng/game/audio/ambience/ambientaudioentity.cpp
--- a/src/dev_ng/game/audio/ambience/ambientaudioentity.cpp
+++ b/src/dev_ng/game/audio/ambience/ambientaudioentity.cpp
@@ -30,15 +30,15 @@
 #include "system/memops.h"
 #include "frontend/MiniMap.h" 
 #include "grcore/debugdraw.h"
-#include "game/clock.h"
+#include "game/Clock.h"
 #include "control/gamelogic.h"
 #include "control/replay/replay.h"
 #include "camera/scripted/ScriptedFlyCamera.h"
 #include "scene/scene.h"
-#include "renderer/water.h"
-#include "modelinfo/mlomodelinfo.h"
+#include "renderer/Water.h"
+#include "modelinfo/MloModelInfo.h"
 #include "Peds/ped.h"
-#include "physics/WorldProbe/worldprobe.h"
+#include "physics/WorldProbe/WorldProbe.h"
 #include "game/weather.h"
 #include "spatialdata/sphere.h"
 #include "audiosoundtypes/simplesound.h"
@@ -50,7 +50,7 @@
 #include "audiosoundtypes/envelopesound.h"
 //#include "scene/portals/InteriorInst.h"
 #include "scene/portals/InteriorProxy.h"
-#include "vehicles/vehiclepopulation.h"
+#include "Vehicles/vehiclepopulation.h"
 #include "streaming/populationstreaming.h"
 #include "scene/playerswitch/PlayerSwitchInterface.h"
 #include "Peds/PopCycle.h"
@@ -68,11 +68,11 @@
 #include "camera/debug/DebugDirector.h"
 #include "camera/helpers/Frame.h"
 #include "camera/debug/FreeCamera.h"
-#include "peds/PedFactory.h"
+#include "Peds/PedFactory.h"
 
 #include "system/controlMgr.h"
 #include "system/control.h"
-#include "system/Pad.h"
+#include "system/pad.h"
 
 PF_PAGE(AmbientAudioTimingPage, "audAmbientAudioEntity Timings");
 PF_GROUP(AmbientAudioTimings);
@@ -7768,12 +7768,15 @@ void audAmbientAudioEntity::SerialiseSoundName(char* xmlMessage, char* tempbuffe
 {
 	const Sound* soundPtr = g_AudioEngine.GetSoundManager().GetFactory().GetMetadataPtr(hash);
 
+#if __USEDEBUGAUDIO
 	if(soundPtr)
 	{
 		const audMetadataManager &metadataManager = SOUNDFACTORY.GetMetadataManager();
 		SerialiseString(xmlMessage, tempbuffer, elementName, metadataManager.GetObjectNameFromNameTableOffset(soundPtr->NameTableOffset));
 	}
-	else if(defaultToNull)
+	else
+#endif
+	if (defaultToNull)
 	{
 		SerialiseString(xmlMessage, tempbuffer, elementName, "NULL_SOUND");
 	}
@@ -8052,12 +8055,14 @@ void audAmbientAudioEntity::MoveRuleToCurrentCoords(bool interiorRelative)
 
 		const Sound* soundPtr = g_AudioEngine.GetSoundManager().GetFactory().GetMetadataPtr(ruleData->Sound);
 
+#if __USEDEBUGAUDIO
 		if(soundPtr)
 		{
 			const audMetadataManager &metadataManager = SOUNDFACTORY.GetMetadataManager();
 			SerialiseString(xmlMsg, tmpBuf, "Sound", metadataManager.GetObjectNameFromNameTableOffset(soundPtr->NameTableOffset));
 		}
 		else
+#endif
 		{
 			SerialiseString(xmlMsg, tmpBuf, "Sound", "NULL_SOUND");
 		}
