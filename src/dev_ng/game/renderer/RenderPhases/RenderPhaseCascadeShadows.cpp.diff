diff --git a/src/dev_ng/game/renderer/RenderPhases/RenderPhaseCascadeShadows.cpp b/src/dev_ng/game/renderer/RenderPhases/RenderPhaseCascadeShadows.cpp
--- a/src/dev_ng/game/renderer/RenderPhases/RenderPhaseCascadeShadows.cpp
+++ b/src/dev_ng/game/renderer/RenderPhases/RenderPhaseCascadeShadows.cpp
@@ -75,7 +75,7 @@
 #include "fwrenderer/renderlistgroup.h"
 
 #include "camera/viewports/ViewportManager.h"
-#include "camera/viewports/viewport.h"
+#include "camera/viewports/Viewport.h"
 #include "camera/base/BaseCamera.h"
 #include "camera/CamInterface.h"
 #include "camera/cutscene/CutsceneDirector.h"
@@ -84,12 +84,12 @@
 #include "camera/switch/SwitchCamera.h"
 #include "camera/switch/SwitchDirector.h"
 #include "camera/cinematic/CinematicDirector.h"
-#include "camera\cinematic\camera\tracking\CinematicFirstPersonIdleCamera.h"
-#include "camera\cinematic\camera\tracking\CinematicHeliChaseCamera.h"
-#include "camera\gameplay\aim\FirstPersonPedAimCamera.h"
+#include "camera/cinematic/camera/tracking/CinematicFirstPersonIdleCamera.h"
+#include "camera/cinematic/camera/tracking/CinematicHeliChaseCamera.h"
+#include "camera/gameplay/aim/FirstPersonPedAimCamera.h"
 #include "camera/cinematic/camera/mounted/CinematicMountedCamera.h"
 #include "control/gamelogic.h"
-#include "cutscene/CutSceneManagerNew.h"
+#include "Cutscene/CutSceneManagerNew.h"
 #include "debug/BankUtil.h"
 #include "debug/BlockView.h"
 #include "debug/DebugDraw/DebugCameraLock.h"
@@ -99,7 +99,7 @@
 #include "debug/Rendering/DebugDeferred.h"
 #include "debug/TextureViewer/TextureViewer.h" // filthy hack for CDebugTextureViewerInterface::GetWorldPosUnderMouse
 #include "debug/TiledScreenCapture.h"
-#include "frontend\NewHud.h"
+#include "frontend/NewHud.h"
 #include "game/Clock.h"
 #include "modelinfo/MloModelInfo.h"
 #include "Peds/ped.h"
@@ -128,20 +128,20 @@
 #include "vfx/VfxHelper.h"
 #include "timecycle/TimeCycleConfig.h"
 #include "timecycle/TimeCycle.h"
-#include "task\Movement\TaskParachute.h"
-#include "task\Movement\TaskFall.h"
-#include "Peds\PedIntelligence.h"
-#include "vehicles/vehicle.h"
+#include "task/Movement/TaskParachute.h"
+#include "task/Movement/TaskFall.h"
+#include "Peds/PedIntelligence.h"
+#include "Vehicles/vehicle.h"
 #include "../../shader_source/Lighting/Shadows/cascadeshadows_common.fxh"
 #include "control/replay/replay.h"
 
 #if __BANK
-#include "cutscene/CutsceneCameraEntity.h"
-#include "cutscene/CutSceneDebugManager.h"
+#include "Cutscene/CutSceneCameraEntity.h"
+#include "Cutscene/CutSceneDebugManager.h"
 #endif
 
 // Undefine this to turn off all NV shadow changes.  There is also a Rag widget boolean to disable them dynamically.
-#define USE_NV_SHADOW_LIB RSG_PC
+#define USE_NV_SHADOW_LIB (RSG_PC && !RSG_LINUX)
 
 #if USE_NV_SHADOW_LIB
 
@@ -2162,56 +2162,7 @@ public:
 		m_currDepthBiasClamp	= 0.0f;
 	}
 
-	grcRasterizerStateHandle Create(float depthBias, float slopeBias, float depthBiasClamp, u32 WIN32PC_ONLY(updateid))
-	{
-		grcRasterizerStateHandle state = grcStateBlock::RS_Invalid;
-
-#if RSG_PC
-		float	delta = fabsf(m_currDepthBias - depthBias);
-#endif
-
-#if !__FINAL
-		if(!(m_stateIndex >= 0 && m_stateIndex < N))
-		{
-			grcDebugf1("[CascadeShadows] State index invalid: %d/%d", m_stateIndex, N);
-		}
-#endif
-
-		if ((m_currDepthBias == depthBias WIN32PC_ONLY(|| delta < 0.0001f))	&&
-			m_currSlopeBias			== slopeBias		&&
-			m_currDepthBiasClamp	== depthBiasClamp	&&
-			m_stateIndex >= 0 && m_stateIndex < N WIN32PC_ONLY(BANK_ONLY(&& gCascadeShadows.m_debug.m_rasterStateCacheEnabled) && m_updateId == updateid))
-		{
-			state = m_states[m_stateIndex];
-		}
-		else
-		{
-			m_stateIndex = (m_stateIndex + 1)%N;
-
-			if (m_states[m_stateIndex] != grcStateBlock::RS_Invalid)
-			{
-				grcStateBlock::DestroyRasterizerState(m_states[m_stateIndex]); // destroy oldest state
-			}
-
-			grcRasterizerStateDesc desc = m_desc; // copy desc
-
-			desc.DepthBiasDX9			= depthBias;
-			desc.SlopeScaledDepthBias	= slopeBias;
-			desc.DepthBiasClamp			= depthBiasClamp;
-
-			state = grcStateBlock::CreateRasterizerState(desc);
-
-			m_states[m_stateIndex]	= state;
-			m_currDepthBias			= depthBias;
-			m_currSlopeBias			= slopeBias;
-			m_currDepthBiasClamp	= depthBiasClamp;
-#if RSG_PC
-			m_updateId				= updateid;
-#endif
-		}
-
-		return state;
-	}
+	grcRasterizerStateHandle Create(float depthBias, float slopeBias, float depthBiasClamp, u32 WIN32PC_ONLY(updateid));
 
 private:
 	grcRasterizerStateDesc   m_desc;
@@ -3388,6 +3339,60 @@ CCSMGlobals gCascadeShadows;
 
 // ================================================================================================
 
+template <int N>
+grcRasterizerStateHandle CCSMDepthBiasStateBuffer<N>::Create(float depthBias, float slopeBias, float depthBiasClamp, u32 WIN32PC_ONLY(updateid))
+{
+	grcRasterizerStateHandle state = grcStateBlock::RS_Invalid;
+
+#if RSG_PC
+	float	delta = fabsf(m_currDepthBias - depthBias);
+#endif
+
+#if !__FINAL
+	if(!(m_stateIndex >= 0 && m_stateIndex < N))
+	{
+		grcDebugf1("[CascadeShadows] State index invalid: %d/%d", m_stateIndex, N);
+	}
+#endif
+
+	if ((m_currDepthBias == depthBias WIN32PC_ONLY(|| delta < 0.0001f))	&&
+		m_currSlopeBias			== slopeBias		&&
+		m_currDepthBiasClamp	== depthBiasClamp	&&
+		m_stateIndex >= 0 && m_stateIndex < N WIN32PC_ONLY(BANK_ONLY(&& gCascadeShadows.m_debug.m_rasterStateCacheEnabled) && m_updateId == updateid))
+	{
+		state = m_states[m_stateIndex];
+	}
+	else
+	{
+		m_stateIndex = (m_stateIndex + 1)%N;
+
+		if (m_states[m_stateIndex] != grcStateBlock::RS_Invalid)
+		{
+			grcStateBlock::DestroyRasterizerState(m_states[m_stateIndex]); // destroy oldest state
+		}
+
+		grcRasterizerStateDesc desc = m_desc; // copy desc
+
+		desc.DepthBiasDX9			= depthBias;
+		desc.SlopeScaledDepthBias	= slopeBias;
+		desc.DepthBiasClamp			= depthBiasClamp;
+
+		state = grcStateBlock::CreateRasterizerState(desc);
+
+		m_states[m_stateIndex]	= state;
+		m_currDepthBias			= depthBias;
+		m_currSlopeBias			= slopeBias;
+		m_currDepthBiasClamp	= depthBiasClamp;
+#if RSG_PC
+		m_updateId				= updateid;
+#endif
+	}
+
+	return state;
+}
+
+// ================================================================================================
+
 void ShadowRevealSetup::Init(const char shaderName[])
 {
 	shader = grmShaderFactory::GetInstance().Create();
@@ -6289,7 +6294,11 @@ void CCSMGlobals::CreateRenderTargets()
 			m_depthBiasPrecisionScale = Vec4V(V_ONE);
 			m_slopeBiasPrecisionScale = 1.0f;
 
-			if(BANK_ONLY(gCascadeShadows.m_debug.m_modulateDepthSlopEnabled &&) WIN32PC_ONLY(!gCascadeShadows.m_enableNvidiaShadows &&) CSettingsManager::GetInstance().GetSettings().m_graphics.m_ShadowQuality > CSettings::High)
+			if(BANK_ONLY(gCascadeShadows.m_debug.m_modulateDepthSlopEnabled &&)
+#if USE_NV_SHADOW_LIB
+				WIN32PC_ONLY(!gCascadeShadows.m_enableNvidiaShadows &&)
+#endif
+				CSettingsManager::GetInstance().GetSettings().m_graphics.m_ShadowQuality > CSettings::High)
 			{
 				m_depthBiasPrecisionScale = Vec4V(1.0f, 0.8f, 0.6f, 0.4f);
 				m_slopeBiasPrecisionScale = 0.6f;
@@ -9588,7 +9597,7 @@ static void CSMSetRenderStates(const CCSMState& state, int cascadeIndex, bool XE
 	case 3: shadowDepthBias = depthBias.GetWf(); shadowSlopeBias = slopeBias.GetWf(); shadowDepthBiasClamp = depthBiasClamp.GetWf(); break;
 	}
 
-#if RSG_PC
+#if RSG_PC && !RSG_LINUX
 	float delta = fabsf(gCascadeShadows.m_CachedDepthBias[cascadeIndexForDepthSlopeBias]- shadowDepthBias);
 	if(delta > g_RasterCacheThreshold)
 	{
