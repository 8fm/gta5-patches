diff --git a/src/dev_ng/rage/base/src/grcore/device_win32.cpp b/src/dev_ng/rage/base/src/grcore/device_win32.cpp
--- a/src/dev_ng/rage/base/src/grcore/device_win32.cpp
+++ b/src/dev_ng/rage/base/src/grcore/device_win32.cpp
@@ -11,11 +11,13 @@
 #include "file/file_config.h"
 
 #if __WIN32PC
+#if !__LINUX
 #pragma warning(disable: 4668)
 #include <winsock2.h>
 #include <Wtsapi32.h>
 #pragma comment(lib,"Wtsapi32.lib")
 #pragma warning(error: 4668)
+#endif // !__LINUX
 
 #include "system/xtl.h"
 #include "system/d3d9.h"
@@ -34,10 +36,12 @@
 #include "resourcecache.h"
 #include "texture.h"
 #include "viewport.h"
+#if !__LINUX
 #include <ddraw.h>
 #include <wbemidl.h>
+#endif
 
-#if RSG_PC
+#if RSG_PC && !RSG_LINUX
 #include <dbt.h>
 #endif
 
@@ -51,12 +55,14 @@
 #include <dxdiag.h>
 #endif // __D3D9
 #define COMPILE_MULTIMON_STUBS
+#if !__LINUX
 #include <multimon.h>
 #include <strsafe.h>
 
 #pragma comment(lib,"wbemuuid.lib")
 #pragma comment(lib,"user32.lib")
 #pragma comment(lib,"d3d9.lib")
+#endif // !__LINUX
 
 // #include <shellscalingapi.h>
 
@@ -142,7 +148,7 @@ PARAM(BlockOnLostFocus, "[RenderThread] Block when game loses focus");
 #endif
 
 #if __WIN32PC || RSG_DURANGO
-int grcDevice::sm_ThreadId = -1;
+__THREAD int grcDevice::sm_ThreadId = -1;
 sysIpcSema grcDevice::sm_Controller = NULL;
 sysIpcCurrentThreadId grcDevice::sm_CreationOwner = sysIpcCurrentThreadIdInvalid;
 bool grcDevice::sm_AllowUpdateThreadBlock = true;
@@ -261,7 +267,9 @@ Functor1<float> grcDevice::sm_StereoSepChangeCb;
 Functor1<float> grcDevice::sm_StereoConvChangeCb;
 #endif
 
+#if __D3D9
 WINDOWPLACEMENT s_WindowedPlacement;
+#endif
 extern unsigned int g_grcDepthFormat;
 #endif
 
@@ -271,13 +279,13 @@ volatile bool grcDevice::sm_HasFocus = true;
 volatile u32 grcDevice::sm_KillSwitch = 0;
 #endif
 
-#if __WIN32
+#if __WIN32 || __LINUX
 // Application window title.
 static char s_WindowTitle[64];
 
 void grcDevice::SetWindowTitle(const char *appName) {
 	safecpy(s_WindowTitle,appName,sizeof(s_WindowTitle));
-#if __WIN32PC
+#if __WIN32PC && !__LINUX
 	if (g_hwndMain)	// Set title immediately if window is already up
 		::PostMessageA(g_hwndMain, WM_SETTEXT, 0, (LPARAM)appName);
 #endif
@@ -324,12 +332,14 @@ typedef HRESULT ( WINAPI* LPCREATEDXGIFACTORY )( REFIID, void** );
 typedef HRESULT ( WINAPI* LPDIRECTDRAWCREATE )( GUID FAR *lpGUID, LPDIRECTDRAW FAR *lplpDD, IUnknown FAR *pUnkOuter );
 #endif // (__SHADERMODEL < 40)
 
+#if __D3D9
 typedef BOOL    ( WINAPI* PfnCoSetProxyBlanket )( IUnknown* pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc,
                                                   OLECHAR* pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel,
                                                   RPC_AUTH_IDENTITY_HANDLE pAuthInfo, DWORD dwCapabilities );
 
 //-----------------------------------------------------------------------------
 BOOL CALLBACK MonitorEnumProc( HMONITOR hMonitor, HDC hdcMonitor, LPRECT lprcMonitor, LPARAM dwData );
+#endif // __D3D9
 HRESULT GetDeviceIDFromHMonitor( HMONITOR hm, WCHAR* strDeviceID, int cchDeviceID );
 HRESULT GetVideoMemoryViaWMI( HMONITOR hMonitor, SIZE_T* pdwAdapterRam );
 HRESULT GetVideoMemoryViaD3D9( HMONITOR hMonitor, SIZE_T* pdwAvailableTextureMem );
@@ -1582,6 +1592,7 @@ static void dont_handle() {}
 void (*grcDevice::DeviceChangeHandler)() = dont_handle;
 #endif
 
+#if !RSG_LINUX
 static LRESULT CALLBACK grcWindowProc(HWND hwnd,UINT msg,WPARAM wParam,LPARAM lParam) 
 {
 	// NOTE: Depending upon the type of suspend we might not receive a suspend event. If this happens
@@ -2368,8 +2379,9 @@ static LRESULT CALLBACK grcWindowProc(HWND hwnd,UINT msg,WPARAM wParam,LPARAM lP
 	}
 	return g_WindowProc(hwnd,msg,wParam,lParam);
 }
+#endif // !RSG_LINUX
 
-#if __D3D11
+#if __D3D11 && !RSG_LINUX
 void grcDevice::ComputeMaximizedWindowDimensions(RECT &rect)
 {
 	const grcAdapterD3D11* adapter = (grcAdapterD3D11*)grcAdapterManager::GetInstance()->GetAdapter(0);
@@ -2486,8 +2498,12 @@ bool grcDevice::ComputeWindowDimensions(RECT &rect, unsigned int windowFlags)
 }
 #endif
 
-HWND grcDevice::CreateDeviceWindow(HWND parent) 
+HWND__* grcDevice::CreateDeviceWindow(HWND__* parent)
 {
+#if RSG_LINUX
+       HWND__* result;
+#else
+
 	static HINSTANCE hShCore = LoadLibrary("Shcore.dll");
 	if (hShCore)
 	{
@@ -2691,6 +2707,7 @@ HWND grcDevice::CreateDeviceWindow(HWND parent)
 
 	SetThreadExecutionState(ES_CONTINUOUS | ES_DISPLAY_REQUIRED);
 
+#endif // RSG_LINUX
 	return result;
 }
 
@@ -2963,7 +2980,7 @@ void grcDevice::InitializeStereoSystem(bool
 void grcDevice::Manage() 
 {
 	WIN32PC_ONLY(TELEMETRY_START_ZONE(PZONE_NORMAL, __FILE__,__LINE__,"grcDevice::Manage()"));
-#if __WIN32PC
+#if __WIN32PC && !__LINUX
 	// Do not enter sleep mode or dim the display.
 	SetThreadExecutionState(ES_DISPLAY_REQUIRED | ES_SYSTEM_REQUIRED);
 
@@ -3252,7 +3269,7 @@ void grcDevice::UnregisterAllDeviceLostCallbacks()
 
 bool grcDevice::GetHasFocus()
 {
-#if __WIN32PC
+#if __WIN32PC && !__LINUX
 #if __BANK
 
 	static bool usingRag = PARAM_rag.Get();
@@ -3285,7 +3302,7 @@ bool grcDevice::GetHasFocus()
 
 #endif //__WIN32PC || RSG_DURANGO
 
-#if RSG_PC
+#if RSG_PC && !RSG_LINUX
 sysIpcThreadId grcDevice::sm_FocusQueryThreadId = sysIpcThreadIdInvalid;
 static bool sm_bRunFocusQueryThread = false;
 
